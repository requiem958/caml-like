//Definition de la grammaire syntaxique d'un programme CAML

//Lexemes terminaux en MAJUSCULES:

//Lexemes de controles
FIN_PRG:  ;;
FIN_EXPR: ;

//Lexemes de mots clés
LET:	  let
AND:	  and
IN:	  in
IF:	  if
ELSE:	  else
THEN:	  then
BEGIN:	  begin
END:	  end
PARO:	  (
PARF:	  )
COMMENTO: (*
COMMENTF: *)

//Lexemes d'opérateurs
PLUS:	  +
MINUS:	  -
MUL:	  *
DIV:	  /
EQUAL:	  =
NOT:	  !
LOGIC_AND:	&
LOGIC_OR: 	or
GREATER_THAN:	>
LOWER_THAN:	<
EQUALITY:	==
INEQUALITY:	!=
GREATER_OR_EQUAL:	>=
LOWER_OR_EQUAL:		<=

//Grammaire par ordre d'évaluation (a peu près)

//Axiome
programme	-> seq_expression FIN_PRG

//Une multitude d'expression
seq_expression 	-> expression ss_expression

//Chaque expression est séparée par une FIN_EXPR
ss_expression 	-> eps
		-> FIN_EXPR expression ss_expression

//Une expression seule
expression 	-> valeur
	   	-> affectation		//let 
	   	-> operation		// operation de valeur
	   	-> condition		// if then else 


valeur		-> constante
		-> identificateur	//Nom de variable

constante	-> chaine de caractère
		-> entier
		-> flottant

//Nom de variable ou appel de fonction
identificateur	  -> nom_var seq_param

seq_param	  -> param ss_param

ss_param	  -> eps
		  -> param ss_param

param		  -> nom_var
		  -> constante

nom_var		  -> chaine de caractères commençant par une lettre

//Affectation : let <var> = <expr> [and <var> = <expr> ...] in <expr>

affectation   -> LET seq_affect IN expression

seq_affect    -> affect ss_affect

ss_affect     -> eps
	      -> AND affect ss_affect

affect	      -> object EQUAL expression

object	      -> nom_var seq_fparam

seq_fparam    -> fparam ss_fparam

ss_fparam     -> eps
	      -> fparam ss_fparam

fparam	      -> nom_var

//Opérations (EAG modifiées)

operation    -> seq_terme
seq_terme    -> terme ss_terme
ss_terme     -> eps
	     -> op1 terme ss_terme

terme	     -> seq_facteur
seq_facteur  -> facteur ss_facteur
ss_facteur   -> eps
	     -> op2 facteur ss_facteur
facteur	     -> MINUS valeur
	     -> valeur

op1	     -> PLUS
	     -> MINUS

op2	     -> MUL
	     -> DIV

//Conditions logiques

condition -> IF seq_boolor THEN expression suite_condition

suite_condition -> eps
		-> ELSE expression

seq_boolor	->boolor ss_boolor
		->PARO boolor PARF ss_boolor

ss_boolor	-> eps
		-> op1log boolor ss_boolor

boolor		-> seq_booland
		-> NOT seq_booland

seq_booland	-> booland ss_booland
		-> PARO booland PARF ss_booland

ss_booland	-> eps
		-> op2log booland ss_booland

booland		-> valeur
		-> NOT valeur
		-> comparaison
		-> NOT comparaison

comparaison	-> expression op_compar expression

//Opérateurs d'expression logiques
op1log	     -> LOGIC_OR
op2log	     -> LOGIC_AND
		   
	    
op_compar   -> EQUALITY
	    -> INEQUALITY
	    -> GREATER_THAN
	    -> LOWER_THAN
	    -> LOWER_OR_EQUAL
	    -> GREATER_OR_EQUAL 
