//Definition de la grammaire syntaxique d'un programme CAML

//Lexemes terminaux en MAJUSCULES:

//Lexemes de controles
FIN_PRG:  ;;
FIN_EXPR: ;

//Lexemes de mots clés
LET:	  let
AND:	  and
IN:	  in
IF:	  if
ELSE:	  else
THEN:	  then
BEGIN:	  begin
END:	  end
PARO:	  (
PARF:	  )

//Lexemes d'opérateurs
EQUAL:	  =
NOT:	  !
LOGIC_AND:	&
LOGIC_OR: 	or
GREATER_THAN:	>
LOWER_THAN:	<
EQUALITY:	==
INEQUALITY:	!=
GREATER_OR_EQUAL:	>=
LOWER_OR_EQUAL:		<=

//Grammaire par ordre d'évaluation (a peu près)

//Axiome
programme	-> seq_expression FIN_PRG

//Une multitude d'expression
seq_expression 	-> expression s_expression

//Chaque expression est séparée par une FIN_EXPR
s_expression 	-> eps
		-> FIN_EXPR expression s_expression

//Une expression seule
expression 	-> valeur
	   	-> affectation		//let 
	   	-> operation		// operation de valeur
	   	-> condition		// if then else 


valeur    	-> identificateur	//Nom de variable

//Nom de variable ou appel de fonction
identificateur	  -> constant
		  -> nom_var seq_param

seq_param	  -> param ss_param

s_param		  -> eps
		  -> param ss_param

param		  -> nom_var
		  -> constant

nom_var		  -> chaine de caractères commençant par une lettre

//Affectation : let <var> = <expr> [and <var> = <expr> ...] in <expr>

affectation   -> LET seq_affect IN expr

seq_affect    -> affect ss_affect

ss_affect     -> eps
	      -> AND affect ss_affect

affect	      -> object EQUAL expression

object	      -> nom_var seq_fparam

seq_fparam    -> fparam ss_fparam

ss_fparam     -> eps
	      -> fparam ss_fparam

fparam	      -> nom_var

//Opérations (EAG modifiées

operation    -> seq_terme
seq_terme    -> terme ss_terme
ss_terme     -> eps
	     -> op1 terme ss_terme

terme	     -> seq_facteur
seq_facteur  -> facteur ss_facteur
ss_facteur   -> eps
	     -> op2 facteur ss_facteur
facteur	     -> identificateur

//Conditions

condition -> IF seq_comparaison THEN expression suite_condition
suite_condition -> eps
		-> ELSE expression

seq_comparaison    ->comparaison suite_comparaison
		   ->PARO comparaison PARF suite_comparaison
		   
comparaison -> (expression op_compar expression)
	    -> NOT PARO expression op_compar expression PARF
	    
suite_comparaison  -> op_logique comparaison suite_comparaison
		   -> op_logique PARO comparaison PARF suite_comparaison
		   -> eps

op_logique	   -> LOGIC_OR
		   -> LOGIC_AND
		   
	    
op_compar -> EQUALITY
	  -> INEQUALITY
	  -> GREATER_THAN
	  -> LOWER_THAN
	  -> LOWER_OR_EQUAL
	  -> GREATER_OR_EQUAL 
